eclipse.project.name = "gdx-graph-assistant"

sourceCompatibility = 1.8

configurations {
    jarLibs
}

dependencies {
    api project(":gdx-graph-render")

    // Plugins
    api project(":gdx-graph-callback-design")
    api project(":gdx-graph-maps-design")
    api project(":gdx-graph-particles-design")
    api project(":gdx-graph-postprocess-design")
    api project(":gdx-graph-boneanimation-design")
    api project(":gdx-graph-lighting3d-design")
    api project(":gdx-graph-ui-design")
    api project(":gdx-graph-screenshot-design")

    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.github.MarcinSc.gdx-assistant:gdx-assistant-plugin:$gdxAssistantVersion"
    implementation "com.kotcrab.vis:vis-ui:$visUiVersion"
    // Don't need to include VisUI, as gdx-assistant already has it, but that's how one would do it
//    jarLibs("com.kotcrab.vis:vis-ui:$visUiVersion") {
//        exclude group: "com.badlogicgames.gdx"
//    }
}

jar {
    // Package classes from this project ("checking they are directories")
    from {
        configurations.compileClasspath.filter {
            it.exists() && it.isDirectory()
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    // Package dependencies (marked with jarLibs configuration)
    from {
        configurations.jarLibs.filter {
            it.exists()
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    // Package assets
    from("../gdx-graph-render/resources")
    from("../gdx-graph-render-design/resources")
    from("../gdx-graph-shader-design/resources")
    from("../plugins/gdx-graph-lighting3d/gdx-graph-lighting3d-design/resources")

    manifest {
        attributes(
                'Gdx-Assistant-Plugin': "com.gempukku.libgdx.graph.assistant.GdxGraphAssistantPlugin",
        )
    }
}

import com.badlogic.gdx.graphics.Texture
import com.badlogic.gdx.tools.texturepacker.TexturePacker

tasks.register('texturePacking') {
    doLast {
        if (project.ext.has('texturePacker')) {
            TexturePacker.Settings settings = new TexturePacker.Settings()
            settings.grid = false
            settings.maxWidth = 2048
            settings.maxHeight = 2048
            settings.filterMin = Texture.TextureFilter.Nearest
            settings.filterMag = Texture.TextureFilter.Nearest

            for (int i = 0; i < texturePacker.size(); i += 3) {
                println("Calling TexturePacker: " + texturePacker[i + 2])
                TexturePacker.process(settings, texturePacker[i + 0], texturePacker[i + 1], texturePacker[i + 2])
            }
        }
    }
}